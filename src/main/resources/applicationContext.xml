<?xml version="1.0" encoding="ISO-8859-1"?>

<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:util="http://www.springframework.org/schema/util"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
>
    
    <!-- Declare property file locations -->
    <context:property-placeholder location="classpath:workbench.properties" />
    
    <!-- Enable Spring annotations -->
    <context:annotation-config/>
    
    <!--
        Enable load-time-weaving so we can use @Configurable annotation.
        To make this work, we need to set the -java.agent VM argument to the spring-instrument JAR file's path.
        In windows, you can use:
            -javaagent:${env_var:HOMEDRIVE}${env_var:HOMEPATH}\.m2\repository\org\springframework\spring-instrument\3.1.1.RELEASE\spring-instrument-3.1.1.RELEASE.jar
        Mac and Linux users, add your path here.
    -->
    <context:load-time-weaver/>
    
    
    <!-- The application classes -->
    <bean id="application" class="org.generationcp.breeding.manager.application.BreedingManagerApplication" scope="prototype"/>
    
    <!--
        Reuseable UI components can be declared here, but don't do it just so you can have auto-wiring.
        Add @Configurable annotation to your class if you only need auto-wiring.
    -->

    <!-- The Message Source -->
    <bean id="messageSource" class="org.generationcp.commons.vaadin.spring.SimpleResourceBundleMessageSource">
        <property name="basenames">
		  <list>
		    <value>I18NMessages</value>
		    <value>VaadinCommonMessages</value>
		  </list>
		</property>
        <property name="locale">
            <util:constant static-field="java.util.Locale.ENGLISH"/>
        </property>
    </bean>
    
    <bean id="workbenchDataSource" class = "com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${workbench.driver}" />
        <property name="jdbcUrl" value="${workbench.url}" />
        <property name="user" value="${workbench.username}" />
        <property name="password" value="${workbench.password}" /> 

        <!-- C3P0 properties -->
        <property name="maxPoolSize" value="300" />
        <property name="debugUnreturnedConnectionStackTraces" value="true" />
        <property name="unreturnedConnectionTimeout" value="240" />
 	</bean>
    
    <bean id="workbenchSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="workbenchDataSource"/>
        <property name="configLocation" value="classpath:ibpmidware_hib.cfg.xml"/>
    </bean>
    
    
    <bean id="workbenchHibernateSessionProvider" class="org.generationcp.middleware.hibernate.HibernateSessionPerRequestProvider" scope="request" destroy-method="close">
        <property name="sessionFactory" ref="workbenchSessionFactory"/>
        
        <!-- JDK Standard Proxy around this request scoped bean, so we can use it on longer scoped beans -->
        <aop:scoped-proxy proxy-target-class="false"/>
    </bean>
    
    <bean id="managerFactoryProvider" class="org.generationcp.commons.hibernate.DynamicManagerFactoryProviderConcurrency">
    	<constructor-arg ref="workbenchDataManager" />
    	<property name="maxCachedSessionFactories" value="5" />
    	<property name="dbPort" value="${workbench.port}" />
    	<property name="dbHost" value="${workbench.host}" />
    	<property name="dbUsername" value="${workbench.username}"/>
        <property name="dbPassword" value="${workbench.password}"/>
    </bean>
    
    <bean id="managerFactory" name="managerFactory"
    	factory-bean="managerFactoryProvider"
    	factory-method="createInstance"
    	scope="request" destroy-method="close">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="genotypicDataManager" factory-bean="managerFactory"
    	factory-method="getGenotypicDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="germplasmDataManager" factory-bean="managerFactory"
    	factory-method="getGermplasmDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>

    <bean id="locationDataManager" factory-bean="managerFactory"
    	factory-method="getLocationDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="germplasmListManager" factory-bean="managerFactory"
    	factory-method="getGermplasmListManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
     <bean id="pedigreeDataManager" factory-bean="managerFactory"
    	factory-method="getPedigreeDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="inventoryDataManager" factory-bean="managerFactory"
    	factory-method="getInventoryDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>
    
    <bean id="ontologyDataManager" factory-bean="managerFactory"
        factory-method="getOntologyDataManager"
        scope="request">
        <aop:scoped-proxy/>
    </bean>
    
    <bean id="studyDataManager" factory-bean="managerFactory"
    	factory-method="getNewStudyDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>

    <bean id="breedingManagerService" class="org.generationcp.breeding.manager.service.BreedingManagerServiceImpl"/>

    
    <bean id="userDataManager" factory-bean="managerFactory"
    	factory-method="getUserDataManager"
    	scope="request">
    	<aop:scoped-proxy/>
    </bean>

    <bean id="contextUtil" class="org.generationcp.commons.spring.util.ContextUtil"
          scope="request">
        <aop:scoped-proxy/>
    </bean>
    
    <bean id="workbenchDataManager"
        class="org.generationcp.middleware.manager.WorkbenchDataManagerImpl" destroy-method="close">
        <constructor-arg ref="workbenchHibernateSessionProvider" />
    </bean>
    
     <bean id="tomcatUtil" class="org.generationcp.commons.tomcat.util.TomcatUtil">
        <property name="managerUrl" value="${tomcat.manager.url}"/>
        <property name="username"   value="${tomcat.manager.username}"/>
        <property name="password"   value="${tomcat.manager.password}"/>
    </bean>
    
    <!--
        Reuseable UI components can be declared here, but don't do it just so you can have auto-wiring.
        Add @Configurable annotation to your class if you only need auto-wiring.
    -->
</beans>
